<?xml version="1.0" encoding="ISO-8859-15"?>
<launch>

      <arg name="agent"        default="scarab40"/>
      <arg name="rviz"         default="false"/>
      <arg name="ground_truth" default="false"/> <!-- publish ground truth tf tree -->

      <!-- gazebo args -->
      <arg name="world_name"  default="$(find dynamic_logistics_warehouse)/worlds/better_warehouse_no_actor.world"/>
      <arg name="verbose"     default="false"/>
      <arg name="debug"       default="false"/>
      <arg name="gazebo_gui"  default="true"/>

      <!-- tf args -->
      <arg name="base_frame"    default="base_footprint" />
      <arg name="odom_frame"    default="$(arg agent)/odom" />
      <arg name="map_frame"     default="$(arg agent)/map" />
      <arg name="world_frame"   default="world"/>
      <arg name="publish_world" default="true"/>

      <!-- start gazebo -->
      <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name"   value="$(arg world_name)"/>
      <arg name="gui"          value="$(arg gazebo_gui)"/>
      <arg name="debug"        value="$(arg debug)"/>
      <arg name="verbose"      value="$(arg verbose)"/>
      <arg name="paused"       value="false"/>
      <arg name="use_sim_time" value="true"/>
      </include>

      <!-- start rviz -->
      <node name="rviz" pkg="rviz" type="rviz"
            args="-d $(find scarab)/rviz/$(arg agent)_sim.rviz"/>

      <!-- publish static transform between world_frame and map_frame -->
      <node pkg="tf2_ros"
            type="static_transform_publisher"
            name="world_static_tf_broadcaster"
            args="0 0 0 0 0 0 $(arg world_frame) $(arg map_frame)"
            if="$(arg publish_world)"/>

      <!-- publish static transform between world_frame and map_frame -->
      <node pkg="tf2_ros"
            type="static_transform_publisher"
            name="gt_odom_static_tf_broadcaster"
            args="0 0 0 0 0 0 $(arg map_frame) ground_truth/odom"/>

      <group ns="$(arg agent)">

            <!-- load robot urdf to param -->
            <param name="robot_description"
                  command="$(find xacro)/xacro '$(find scarab_description)/urdf/scarab.xacro'" />

            <!-- spawn robot in gazebo -->
            <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" output="screen"
                  args="-urdf -model $(arg agent) -param /$(arg agent)/robot_description -x 0 -y 0 -z 0"/>

            <!-- hack to get laser frame correct -->
            <node pkg="tf2_ros"
                  type="static_transform_publisher"
                  name="base_static_tf_broadcaster"
                  args="0 0 0 0 0 0 laser $(arg agent)/laser"/>

            <!-- publish pose required by hfn-->
            <node name="pose_stamped" pkg="hfn" type="tf_posestamped_node.py" >
                  <param name="base_frame_id" value="$(arg base_frame)" />
                  <param name="map_frame_id"  value="$(arg map_frame)" />
            </node>

            <!-- publish gazebo model joint states to tf -->
            <node name="robot_state_publisher"
                  pkg="robot_state_publisher"
                  type="robot_state_publisher"/>
                  
            <node name="joint_state_publisher"
                  pkg="joint_state_publisher"
                  type="joint_state_publisher"/>

            <!-- convert rviz goal msg to action -->
            <node name="goal_to_action" pkg="hfn" type="goal_to_action.py">
                  <remap from="goal" to="move_base_simple/goal"/>
            </node>

            <!-- navigation via hfn -->
            <node name="hfn_navigation" pkg="hfn" type="hfn" output="screen">
                  <remap from="odom" to="odom_laser"/>
                  <param name="base_frame_id"      value="$(arg base_frame)"/>
                  <param name="map_frame_id"       value="$(arg map_frame)" />
                  <param name="cost_occ_prob"      value="0.7" />
                  <param name="cost_occ_dist"      value="0.7" />
                  <param name="max_occ_dist"       value="1.0" />
                  <param name="lethal_occ_dist"    value="0.2" />
                  <param name="axle_width"         value="0.255"/>
                  <param name="robot_radius"       value="0.3" />
                  <param name="safety_margin"      value="0.1" />
                  <param name="social_margin"      value="0.2" />
                  <param name="goal_tolerance_ang" value=".05"/>     <!--default 2pi-->
                  <param name="goal_tolerance"     value=".05"/>     <!--default .2m-->
                  <param name="w_max"              value="1.0"/>
            </node>

            <!-- slam for localization -->
            <node pkg="gmapping" type="slam_gmapping" name="gmapping" output="screen">
                  <remap from="map_metadata" to="map_metadata"/>
                  <param name="base_frame" value="$(arg base_frame)" />
                  <param name="odom_frame" value="$(arg odom_frame)"/>
                  <param name="map_frame"  value="$(arg map_frame)" />
            </node>

            <!-- laser odom -->
            <node name="laser_odom" pkg="laser_odom" type="laser_odom"
                  output="screen" >
                  <param name="debug" value="false" />
                  <param name="base_frame" value="$(arg base_frame)" />
                  <param name="laser_frame" value="$(arg agent)/laser" />
                  <param name="laser_base_frame" value="$(arg agent)/base_link" />
                  <param name="odom_frame" value="$(arg agent)/odom"/>
            </node>

            <node pkg="kinematic_sim" type="kinematic_sim" name="KinematicSim"
                  respawn="false">
                  <param name="publish_freq" value="20"/>
                  <param name="num_agents" value="1"/>
                  <param name="agent_prefix" value="$(arg agent)"/>
                  <param name="gt_pose_topic" value="pose_stamped" />
                  <param name="global_frame_id" value="$(arg map_frame)" />
                  <param name="pub_global_frame" value="true" />
                  <param name="initial0" value=" 0.0 0.0 0.0"/>
                  <param name="base_frame_id" value="base_footprint_motor"/>
                  <param name="odom_frame_id" value="$(arg agent)/odom_motor"/>
            </node>
      </group>

</launch>
